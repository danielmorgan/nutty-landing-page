---
import Icon from "./Icon.astro";

const { id } = Astro.props;
---

<div
  id={id}
  class="modal pointer-events-none invisible fixed inset-0 z-50 flex items-center justify-center p-4 opacity-0 transition-all duration-300 ease-in-out"
  role="dialog"
  aria-modal="true"
  aria-labelledby={`${id}`}
>
  <div class="bg-nutty-500 fixed inset-0"></div>
  <div
    class="modal-overlay animate-diagonal-scroll-br absolute inset-0 cursor-pointer bg-[url(/images/pattern.png)] bg-size-[auto_96px] bg-repeat opacity-30 sm:bg-size-[auto_128px]"
    aria-hidden="true"
  >
  </div>
  <div
    class="modal-content relative flex max-h-[90vh] w-full max-w-lg scale-90 transform flex-col overflow-hidden rounded-xl bg-white p-4 pb-0 shadow-2xl transition-transform duration-300 ease-in-out sm:p-8 sm:pb-0"
  >
    <a
      href="#"
      class="modal-close inline-flex w-auto shrink items-center rounded-full text-gray-500 transition-colors duration-200 hover:text-gray-700 focus:outline-none"
      aria-label="Close modal"
      role="button"
    >
      <Icon icon="back" />
      Back
    </a>

    <div class="modal-body flex-1 overflow-y-auto">
      <slot />
    </div>

    <div class="modal-footer flex-1">
      <div id="pop-up" class="popup-initial-hidden">
        <img
          src="/images/nutty-peek.png"
          alt="Cartoon squirrel peeking up over the bottom of the page"
          class="mx-auto h-auto w-3/4"
        />
      </div>
    </div>
  </div>
</div>

<style>
  .modal:target {
    @apply pointer-events-auto visible opacity-100;
  }

  .modal:target .modal-content {
    @apply scale-100;
  }

  /* Prevent body scroll when modal is open */
  .modal:target ~ body,
  body:has(.modal:target) {
    @apply overflow-hidden;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const popUp = document.querySelector("#pop-up");
    const modals = document.querySelectorAll(".modal");

    const handleHashChange = () => {
      if (location.hash === "#waitlist-modal") {
        popUp?.classList.add("animate-pop-up");
      } else {
        popUp?.classList.remove("animate-pop-up");
      }
    };

    window.addEventListener("hashchange", handleHashChange);
    handleHashChange(); // Initial check in case the page loads with the hash

    // Set up close handlers
    modals.forEach((modal) => {
      const overlay = modal.querySelector(".modal-overlay");
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && modal.matches(":target")) {
          window.location.hash = "";
        }
      });
      overlay?.addEventListener("click", () => {
        window.location.hash = "";
      });
    });
  });
</script>
